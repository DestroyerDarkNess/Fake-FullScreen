<?xml version="1.0"?>
<doc>
<assembly>
<name>
FakeFullScreen
</name>
</assembly>
<members>
<member name="M:FakeFullScreen.SetWindowStyle.NativeMethods.FindWindow(System.String,System.String)">
	<summary>
 Retrieves a handle to the top-level window whose class name and window name match the specified strings.
 This function does not search child windows.
 This function does not perform a case-sensitive search.
 To search child windows, beginning with a specified child window, use the FindWindowEx function.
 MSDN Documentation: http://msdn.microsoft.com/en-us/library/windows/desktop/ms633499%28v=vs.85%29.aspx
 </summary>
	<param name="lpClassName">The class name.
 If this parameter is NULL, it finds any window whose title matches the lpWindowName parameter.</param>
	<param name="lpWindowName">The window name (the window's title).
 If this parameter is NULL, all window names match.</param>
	<returns>If the function succeeds, the return value is a handle to the window that has the specified class name and window name.
 If the function fails, the return value is NULL.</returns>
</member><member name="M:FakeFullScreen.SetWindowStyle.NativeMethods.FindWindowEx(System.IntPtr,System.IntPtr,System.String,System.String)">
	<summary>
 Retrieves a handle to a window whose class name and window name match the specified strings. 
 The function searches child windows, beginning with the one following the specified child window. 
 This function does not perform a case-sensitive search.
 MSDN Documentation: http://msdn.microsoft.com/en-us/library/windows/desktop/ms633500%28v=vs.85%29.aspx
 </summary>
	<param name="hwndParent">
 A handle to the parent window whose child windows are to be searched.
 If hwndParent is NULL, the function uses the desktop window as the parent window. 
 The function searches among windows that are child windows of the desktop. 
 </param>
	<param name="hwndChildAfter">
 A handle to a child window. 
 The search begins with the next child window in the Z order. 
 The child window must be a direct child window of hwndParent, not just a descendant window.
 If hwndChildAfter is NULL, the search begins with the first child window of hwndParent.
 </param>
	<param name="strClassName">
 The window class name.
 </param>
	<param name="strWindowName">
 The window name (the window's title). 
 If this parameter is NULL, all window names match.
 </param>
	<returns>
 If the function succeeds, the return value is a handle to the window that has the specified class and window names.
 If the function fails, the return value is NULL.
 </returns>
</member><member name="M:FakeFullScreen.SetWindowStyle.NativeMethods.GetWindowThreadProcessId(System.IntPtr,System.Int32@)">
	<summary>
 Retrieves the identifier of the thread that created the specified window 
 and, optionally, the identifier of the process that created the window.
 MSDN Documentation: http://msdn.microsoft.com/en-us/library/windows/desktop/ms633522%28v=vs.85%29.aspx
 </summary>
	<param name="hWnd">A handle to the window.</param>
	<param name="ProcessId">
 A pointer to a variable that receives the process identifier. 
 If this parameter is not NULL, GetWindowThreadProcessId copies the identifier of the process to the variable; 
 otherwise, it does not.
 </param>
	<returns>The identifier of the thread that created the window.</returns>
</member><member name="T:FakeFullScreen.SetWindowStyle.NativeMethods">
	<summary>
 Platform Invocation methods (P/Invoke), access unmanaged code.
 This class does not suppress stack walks for unmanaged code permission.
 <see cref="T:System.Security.SuppressUnmanagedCodeSecurityAttribute"/>  must not be applied to this class.
 This class is for methods that can be used anywhere because a stack walk will be performed.
 MSDN Documentation: http://msdn.microsoft.com/en-us/library/ms182161.aspx
 </summary>
</member><member name="M:FakeFullScreen.SetWindowStyle.SetWindowStyle(System.IntPtr,FakeFullScreen.SetWindowStyle.WindowStyles)">
	<summary>
 Set the state of a window by an HWND.
 </summary>
	<param name="WindowHandle">A handle to the window.</param>
	<param name="WindowStyle">The Style of the window.</param>
	<returns><c>true</c> if the function succeeds, <c>false</c> otherwise.</returns>
</member><member name="M:FakeFullScreen.SetWindowStyle.SetWindowStyle(System.String,FakeFullScreen.SetWindowStyle.WindowStyles,System.Boolean)">
	<summary>
 Set the state of a window by a process name.
 </summary>
	<param name="ProcessName">The name of the process.</param>
	<param name="WindowStyle">The Style of the window.</param>
	<param name="Recursivity">If set to <c>false</c>, only the first process instance will be processed.</param>
</member><member name="T:FakeFullScreen.SetWindowStyle">
	<summary>
 Sets the style of a window.
 </summary>
</member><member name="M:FakeFullScreen.SetWindowState.NativeMethods.FindWindow(System.String,System.String)">
	<summary>
 Retrieves a handle to the top-level window whose class name and window name match the specified strings.
 This function does not search child windows.
 This function does not perform a case-sensitive search.
 To search child windows, beginning with a specified child window, use the FindWindowEx function.
 MSDN Documentation: http://msdn.microsoft.com/en-us/library/windows/desktop/ms633499%28v=vs.85%29.aspx
 </summary>
	<param name="lpClassName">The class name.
 If this parameter is NULL, it finds any window whose title matches the lpWindowName parameter.</param>
	<param name="lpWindowName">The window name (the window's title).
 If this parameter is NULL, all window names match.</param>
	<returns>If the function succeeds, the return value is a handle to the window that has the specified class name and window name.
 If the function fails, the return value is NULL.</returns>
</member><member name="M:FakeFullScreen.SetWindowState.NativeMethods.FindWindowEx(System.IntPtr,System.IntPtr,System.String,System.String)">
	<summary>
 Retrieves a handle to a window whose class name and window name match the specified strings. 
 The function searches child windows, beginning with the one following the specified child window. 
 This function does not perform a case-sensitive search.
 MSDN Documentation: http://msdn.microsoft.com/en-us/library/windows/desktop/ms633500%28v=vs.85%29.aspx
 </summary>
	<param name="hwndParent">
 A handle to the parent window whose child windows are to be searched.
 If hwndParent is NULL, the function uses the desktop window as the parent window. 
 The function searches among windows that are child windows of the desktop. 
 </param>
	<param name="hwndChildAfter">
 A handle to a child window. 
 The search begins with the next child window in the Z order. 
 The child window must be a direct child window of hwndParent, not just a descendant window.
 If hwndChildAfter is NULL, the search begins with the first child window of hwndParent.
 </param>
	<param name="strClassName">
 The window class name.
 </param>
	<param name="strWindowName">
 The window name (the window's title). 
 If this parameter is NULL, all window names match.
 </param>
	<returns>
 If the function succeeds, the return value is a handle to the window that has the specified class and window names.
 If the function fails, the return value is NULL.
 </returns>
</member><member name="M:FakeFullScreen.SetWindowState.NativeMethods.GetWindowThreadProcessId(System.IntPtr,System.Int32@)">
	<summary>
 Retrieves the identifier of the thread that created the specified window 
 and, optionally, the identifier of the process that created the window.
 MSDN Documentation: http://msdn.microsoft.com/en-us/library/windows/desktop/ms633522%28v=vs.85%29.aspx
 </summary>
	<param name="hWnd">A handle to the window.</param>
	<param name="ProcessId">
 A pointer to a variable that receives the process identifier. 
 If this parameter is not NULL, GetWindowThreadProcessId copies the identifier of the process to the variable; 
 otherwise, it does not.
 </param>
	<returns>The identifier of the thread that created the window.</returns>
</member><member name="M:FakeFullScreen.SetWindowState.NativeMethods.ShowWindow(System.IntPtr,FakeFullScreen.SetWindowState.WindowState)">
	<summary>
 Sets the specified window's show state.
 MSDN Documentation: http://msdn.microsoft.com/en-us/library/windows/desktop/ms633548%28v=vs.85%29.aspx
 </summary>
	<param name="hwnd">A handle to the window.</param>
	<param name="nCmdShow">Controls how the window is to be shown.</param>
	<returns><c>true</c> if the function succeeds, <c>false</c> otherwise.</returns>
</member><member name="T:FakeFullScreen.SetWindowState.NativeMethods">
	<summary>
 Platform Invocation methods (P/Invoke), access unmanaged code.
 This class does not suppress stack walks for unmanaged code permission.
 <see cref="T:System.Security.SuppressUnmanagedCodeSecurityAttribute"/>  must not be applied to this class.
 This class is for methods that can be used anywhere because a stack walk will be performed.
 MSDN Documentation: http://msdn.microsoft.com/en-us/library/ms182161.aspx
 </summary>
</member><member name="F:FakeFullScreen.SetWindowState.WindowState.Hide">
	<summary>
 Hides the window and activates another window.
 </summary>
</member><member name="F:FakeFullScreen.SetWindowState.WindowState.Normal">
	<summary>
 Activates and displays a window. 
 If the window is minimized or maximized, the system restores it to its original size and position.
 An application should specify this flag when displaying the window for the first time.
 </summary>
</member><member name="F:FakeFullScreen.SetWindowState.WindowState.ShowMinimized">
	<summary>
 Activates the window and displays it as a minimized window.
 </summary>
</member><member name="F:FakeFullScreen.SetWindowState.WindowState.Maximize">
	<summary>
 Maximizes the specified window.
 </summary>
</member><member name="F:FakeFullScreen.SetWindowState.WindowState.ShowMaximized">
	<summary>
 Activates the window and displays it as a maximized window.
 </summary>
</member><member name="F:FakeFullScreen.SetWindowState.WindowState.ShowNoActivate">
	<summary>
 Displays a window in its most recent size and position. 
 This value is similar to <see cref="F:FakeFullScreen.SetWindowState.WindowState.Normal"/>, except the window is not actived.
 </summary>
</member><member name="F:FakeFullScreen.SetWindowState.WindowState.Show">
	<summary>
 Activates the window and displays it in its current size and position.
 </summary>
</member><member name="F:FakeFullScreen.SetWindowState.WindowState.Minimize">
	<summary>
 Minimizes the specified window and activates the next top-level window in the Z order.
 </summary>
</member><member name="F:FakeFullScreen.SetWindowState.WindowState.ShowMinNoActive">
	<summary>
 Displays the window as a minimized window. 
 This value is similar to <see cref="F:FakeFullScreen.SetWindowState.WindowState.ShowMinimized"/>, except the window is not activated.
 </summary>
</member><member name="F:FakeFullScreen.SetWindowState.WindowState.ShowNA">
	<summary>
 Displays the window in its current size and position.
 This value is similar to <see cref="F:FakeFullScreen.SetWindowState.WindowState.Show"/>, except the window is not activated.
 </summary>
</member><member name="F:FakeFullScreen.SetWindowState.WindowState.Restore">
	<summary>
 Activates and displays the window. 
 If the window is minimized or maximized, the system restores it to its original size and position.
 An application should specify this flag when restoring a minimized window.
 </summary>
</member><member name="F:FakeFullScreen.SetWindowState.WindowState.ShowDefault">
	<summary>
 Sets the show state based on the SW_* value specified in the STARTUPINFO structure 
 passed to the CreateProcess function by the program that started the application.
 </summary>
</member><member name="F:FakeFullScreen.SetWindowState.WindowState.ForceMinimize">
	<summary>
		<b>Windows 2000/XP:</b> 
 Minimizes a window, even if the thread that owns the window is not responding. 
 This flag should only be used when minimizing windows from a different thread.
 </summary>
</member><member name="T:FakeFullScreen.SetWindowState.WindowState">
	<summary>
 Controls how the window is to be shown.
 MSDN Documentation: http://msdn.microsoft.com/en-us/library/windows/desktop/ms633548%28v=vs.85%29.aspx
 </summary>
</member><member name="M:FakeFullScreen.SetWindowState.SetWindowState(System.IntPtr,FakeFullScreen.SetWindowState.WindowState)">
	<summary>
 Set the state of a window by an HWND.
 </summary>
	<param name="WindowHandle">A handle to the window.</param>
	<param name="WindowState">The state of the window.</param>
	<returns><c>true</c> if the function succeeds, <c>false</c> otherwise.</returns>
</member><member name="M:FakeFullScreen.SetWindowState.SetWindowState(System.String,FakeFullScreen.SetWindowState.WindowState,System.Boolean)">
	<summary>
 Set the state of a window by a process name.
 </summary>
	<param name="ProcessName">The name of the process.</param>
	<param name="WindowState">The state of the window.</param>
	<param name="Recursivity">If set to <c>false</c>, only the first process instance will be processed.</param>
</member><member name="T:FakeFullScreen.SetWindowState">
	<summary>
 Sets the state of a window.
 </summary>
</member><member name="P:FakeFullScreen.My.Resources.Resources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:FakeFullScreen.My.Resources.Resources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="T:FakeFullScreen.My.Resources.Resources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
</members>
</doc>